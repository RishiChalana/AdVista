/**
 * @fileoverview Firestore Security Rules for Advista Platform
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users have ownership over their data (e.g., reports).  Administrative access
 * is granted based on presence in the /roles_admin/{userId} collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /campaigns/{campaignId}: Stores advertising campaigns.  All authenticated users can create campaigns.
 * - /users/{userId}/reports/{reportId}: Stores reports generated by each user.
 * - /messages/{messageId}: Stores contact messages.  Anyone can create a message.
 * - /admin_dashboard/data: Stores admin dashboard information (singleton document).
 * - /roles_admin/{userId}: Collection to denote admin users; document existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document and reports.
 * - Anyone can create campaigns, contact messages
 * - Only authenticated users can create reports under their user ID.
 * - The admin dashboard data is read-only for admins, and inaccessible for others.
 * - Listing of user documents is forbidden.
 * - Listing of messages is forbidden.
 *
 * Denormalization for Authorization:
 *  - Admin status is determined by the presence of a document in `/roles_admin/{userId}` collection, eliminating the need for `get()` calls to a separate roles collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

   /**
    * @description Checks if the user is an existing owner of the document.
    */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by checking for a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can access their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - User cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for advertising campaigns.
     * @path /campaigns/{campaignId}
     * @allow (create) - Any authenticated user can create a campaign.
     * @allow (get, list) - Any authenticated user can read campaign data.
     * @allow (update, delete) - Only the campaign creator can modify or delete it.
     * @deny  (update, delete) -  if the campaign does not exist.
     * @principle Allows public read access, but restricts modifications to the creator.
     */
    match /campaigns/{campaignId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for reports generated by each user.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - User can create a report under their own user ID.
     * @allow (get, list) - User can access their own reports.
     * @deny (create) - User cannot create a report under a different user ID.
     * @deny (update, delete) - User cannot modify or delete other users' reports.
     * @principle Enforces document ownership for reports.
     */
    match /users/{userId}/reports/{reportId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for contact messages.
     * @path /messages/{messageId}
     * @allow (create) - Any user can create a contact message.
     * @deny (get, list, update, delete) - No one can read, list, update, or delete messages.
     * @principle Allows public creation of contact messages.
     */
    match /messages/{messageId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the admin dashboard data.
     * @path /admin_dashboard/data
     * @allow (get) - Only admin users can read the admin dashboard data.
     * @deny (create, list, update, delete) - No one can create, list, update, or delete the admin dashboard data.
     * @principle Restricts access to the admin dashboard data to admin users.
     */
    match /admin_dashboard/data {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules to determine admin role.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) - Only admins can manage other admins.
     * @deny (list) - Listing admins is not allowed.
     */
     match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}