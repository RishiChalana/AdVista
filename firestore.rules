/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with an admin role and user-specific data ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves and admins.
 * - /campaigns/{campaignId}: Stores campaign data, publicly readable, writable only by admins.
 * - /users/{userId}/reports/{reportId}: Stores reports generated by users, accessible only to the user themselves and admins.
 * - /messages/{messageId}: Stores contact messages, writable by anyone, readable and deletable only by admins.
 * - /admin_dashboard/data: Stores admin dashboard data, accessible only to admins.
 * - /roles_admin/{userId}:  A "marker" collection. The existence of a document in this collection signifies that the user is an administrator.
 *
 * Key Security Decisions:
 * - Admin Role: The `isAdmin()` function checks for the existence of a document in the `/roles_admin/{userId}` collection.  This is the only way to elevate privileges.
 * - User Ownership:  Most user data is strictly controlled by the user ID in the path (`/users/{userId}`).
 * - Public Read Campaigns: Campaigns are intended to be publicly visible, but only admins can modify them.
 * - No User Listing:  Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The `isAdmin()` function avoids any `get()` calls on the `/users/{userId}` document itself. It checks for the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Structural Segregation:
 * - Reports are stored as subcollections under users (`/users/{userId}/reports/{reportId}`) to ensure owner-only access by default.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the given userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the document (for update/delete).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

   /**
     * @description Checks if the current user is an admin based on the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Enforces owner-only access for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) User attempts to create a profile with a different ID.
     * @deny (get, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages advertising campaigns with public read access and admin-only write access.
     * @path /campaigns/{campaignId}
     * @allow (get, list) Anyone can read campaign data.
     * @allow (create, update, delete) Only admins can create, update, or delete campaigns.
     * @deny (create, update, delete) Non-admins attempt to create, update, or delete campaigns.
     * @principle Provides public read access while restricting write access to authorized users.
     */
    match /campaigns/{campaignId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Enforces owner-only access for user reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) Signed-in user creates a report under their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own report.
     * @deny (create) User attempts to create a report under a different user's profile.
     * @deny (get, update, delete) User attempts to access another user's report.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin(); // Allow listing reports for a specific user.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId || isAdmin() ;
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Manages contact messages with public write access and admin-only read access.
     * @path /messages/{messageId}
     * @allow (create) Anyone can create a contact message.
     * @allow (get, list, update, delete) Only admins can read, update, or delete contact messages.
     * @deny (get, list, update, delete) Non-admins attempt to access contact messages.
     * @principle Allows public submission of contact messages while restricting access to authorized users.
     */
    match /messages/{messageId} {
      allow get, list: if isAdmin();
      allow create: if true;
      allow update: if false; // No updates to messages.
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the admin dashboard data.
     * @path /admin_dashboard/data
     * @allow (get, create, update, delete) Only admins can access the admin dashboard data.
     * @deny (get, create, update, delete) Non-admins attempt to access the admin dashboard data.
     * @principle Restricts access to sensitive system information to authorized users.
     */
    match /admin_dashboard/data {
      allow get, create, update, delete: if isAdmin();
      allow list: if false; // Singleton - never listed
    }

     /**
     * @description Admin designation via document existence.
     * @path /roles_admin/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @allow list: if false;
     * @principle Use of collection / document existence to denote admin status.
     */
    match /roles_admin/{userId} {
        allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId ;
        allow get: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
        allow list: if false;
    }
  }
}