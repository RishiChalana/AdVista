/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *               with special privileges granted to admin users. Data validation is
 *               minimized to allow for rapid prototyping.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /campaigns/{campaignId}: Stores campaign data. Only the campaign owner (userId field) can read/write.
 * - /users/{userId}/reports/{reportId}: Stores reports generated by users. Only the owner can read/write.
 * - /messages/{messageId}: Stores contact messages. Open read, writes disabled.
 * - /admin_dashboard/data: Singleton document for admin dashboard. Only admins can read/write.
 * - /roles_admin/{userId}: Indicates admin status. Document existence signifies admin.
 * - /admin_impersonation_logs/{logId}: Stores admin impersonation logs. Only admins can write.
 * - /activity_logs/{logId}: Stores activity logs. Only admins can write.
 * - /notifications/{notificationId}: Stores user notifications. Only admins can write and only the intended user can read.
 * - /support_tickets/{ticketId}: Stores support tickets. Only the ticket owner and admins can read/write.
 * - /support_tickets/{ticketId}/messages/{messageId}: Stores messages within a support ticket. Only the ticket owner and admins can read/write.
 * - /payments/{paymentId}: Stores payment records. Only admins can read/write.
 *
 * @keySecurityDecisions
 * - Strict user ownership is enforced for profiles, campaigns, and reports.
 * - Public listing of users is disallowed.
 * - Data validation is minimized to only enforce critical relationships and prevent tampering with ownership.
 * - Admin privileges are determined by the existence of a document in /roles_admin/{userId}.
 * - All writes to admin-controlled collections (activity logs, impersonation logs) are restricted to admins.
 * - List operations are secured based on path and user ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (read, write) User with ID 'user123' can read/write document 'user123'.
     * @deny (read, write) User with ID 'user123' cannot read/write document 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // prevent listing all users
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows authenticated users to read and write campaigns they own.
     * @path /campaigns/{campaignId}
     * @allow (read, write) User with ID 'user123' can read/write campaign 'campaign123' if campaign.userId == 'user123'.
     * @deny (read, write) User with ID 'user123' cannot read/write campaign 'campaign456' if campaign.userId != 'user123'.
     * @principle Enforces document ownership for campaign data.
     */
    match /campaigns/{campaignId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }
      allow get: if isSignedIn() && isOwner();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Allows authenticated users to read and write reports they own.
     * @path /users/{userId}/reports/{reportId}
     * @allow (read, write) User with ID 'user123' can read/write report 'report123' under /users/user123/.
     * @deny (read, write) User with ID 'user123' cannot read/write report 'report456' under /users/user456/.
     * @principle Enforces document ownership for reports.
     */
    match /users/{userId}/reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Allows anyone to read messages, but no one to create, update, or delete them.
      * @path /messages/{messageId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Allows public read access for contact messages while preventing unauthorized modifications.
      */
    match /messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write the admin dashboard data.
     * @path /admin_dashboard/data
     * @allow (read, write) Admin user can read/write the admin dashboard data.
     * @deny (read, write) Non-admin user cannot read/write the admin dashboard data.
     * @principle Enforces admin-only access for sensitive system data.
     */
    match /admin_dashboard/data {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
    
    /**
     * @description Determines if a user is an admin based on the existence of a document in the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow get: if exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
     * @deny create, update, delete: if false;
     * @principle Admin role is determined by document existence.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(userId));
        }
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if false;
        allow delete: if false;
    }
    
    /**
     * @description Allows admins to write admin impersonation logs.
     * @path /admin_impersonation_logs/{logId}
     * @allow create: if isAdmin();
     * @deny get, list, update, delete: if false;
     * @principle Only admins can create impersonation logs.
     */
    match /admin_impersonation_logs/{logId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows admins to write activity logs.
     * @path /activity_logs/{logId}
     * @allow create: if isAdmin();
     * @deny get, list, update, delete: if false;
     * @principle Only admins can create activity logs.
     */
    match /activity_logs/{logId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows admins to create notifications, and users to read their own notifications.
     * @path /notifications/{notificationId}
     * @allow create: if isAdmin();
     * @allow get, list: if isOwner(resource.data.userId);
     * @deny update, delete: if false;
     * @principle Admins can create notifications; users can only read their own.
     */
     match /notifications/{notificationId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        allow get: if isSignedIn() && (getSelf().data.userId == request.auth.uid || isAdmin());
        allow list: if isSignedIn() && (getSelf().data.userId == request.auth.uid || isAdmin());
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if false;
        function getSelf() {
          return get(/databases/$(database)/documents/notifications/$(notificationId));
        }
    }

    /**
     * @description Allows users to create support tickets, and admins to read/write all tickets.
     * @path /support_tickets/{ticketId}
     * @allow create: if isSignedIn();
     * @allow get, list: if isOwner(resource.data.userId) || isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @deny delete: if false;
     * @principle Users can create tickets; admins can manage all.
     */
    match /support_tickets/{ticketId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        function isOwner() {
            return getSelf().data.userId == request.auth.uid;
        }

        allow get: if isSignedIn() && (isOwner() || isAdmin());
        allow list: if isSignedIn() && (isOwner() || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isAdmin();
        allow delete: if false;
        function getSelf() {
          return get(/databases/$(database)/documents/support_tickets/$(ticketId));
        }
    }

    /**
     * @description Allows users and admins to create and read messages within a support ticket.
     * @path /support_tickets/{ticketId}/messages/{messageId}
     * @allow create: if isTicketOwner(ticketId) || isAdmin();
     * @allow get, list: if isTicketOwner(ticketId) || isAdmin();
     * @deny update, delete: if false;
     * @principle Users and admins can create and read messages within a support ticket.
     */
    match /support_tickets/{ticketId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        function isTicketOwner(ticketId) {
             return get(/databases/$(database)/documents/support_tickets/$(ticketId)).data.userId == request.auth.uid;
        }

        allow get: if isSignedIn() && (isTicketOwner(ticketId) || isAdmin());
        allow list: if isSignedIn() && (isTicketOwner(ticketId) || isAdmin());
        allow create: if isSignedIn() && (isTicketOwner(ticketId) || isAdmin());
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows admins to read and write payment records.
     * @path /payments/{paymentId}
     * @allow get, list, create, update: if isAdmin();
     * @deny delete: if false;
     * @principle Only admins can manage payment records.
     */
    match /payments/{paymentId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}