/**
 * @fileOverview Firestore Security Rules for the Advista platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated reports.
 * Campaigns and Messages are publicly readable, but write operations are restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the owning user.
 * - /campaigns/{campaignId}: Stores campaign data, publicly readable.
 * - /users/{userId}/reports/{reportId}: Stores user-specific reports, accessible only by the owning user.
 * - /campaigns/{campaignId}/reports/{reportId}: Stores campaign-specific reports.  Requires campaign and report existence.
 * - /messages/{messageId}: Stores contact form messages, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information disclosure.
 * - Campaigns and Messages are publicly readable to allow for open access.
 * - Strict ownership is enforced for user profiles and their reports.
 *
 * Denormalization for Authorization:
 * - Reports are stored as subcollections of both Users and Campaigns to ensure Authorization Independence.
 *   This allows security rules to validate access without needing to read other documents, facilitating atomic operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access control function: is owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Access control function: is existing owner
      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) ;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to campaign data, but restricts write operations.
     * @path /campaigns/{campaignId}
     * @allow (get) - Any user can read a campaign at /campaigns/campaign123.
     * @allow (list) - Any user can list campaigns.
     * @deny (create) - No user can create a campaign.
     * @deny (update) - No user can update a campaign.
     * @principle Allows public read access while restricting write operations.
     */
    match /campaigns/{campaignId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for reports within a user's profile.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - User with UID 'user123' can create a report at /users/user123/reports/report456.
     * @allow (get) - User with UID 'user123' can read their report at /users/user123/reports/report456.
     * @allow (update) - User with UID 'user123' can update their report at /users/user123/reports/report456.
     * @allow (delete) - User with UID 'user123' can delete their report at /users/user123/reports/report456.
     * @deny (create) - User with UID 'user456' cannot create a report at /users/user123/reports/report456.
     * @deny (get) - User with UID 'user456' cannot read the report at /users/user123/reports/report456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reports/{reportId} {
          // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access control function: is owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Access control function: is existing owner
      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Allows existence checks for reports associated with a campaign.
       * @path /campaigns/{campaignId}/reports/{reportId}
       * @allow (get) - Any user can read a report at /campaigns/campaign123/reports/report456 if it exists.
       * @allow (list) - Any user can list reports associated with a campaign.
       * @deny (create) - No user can create a report.
       * @deny (update) - No user can update a report.
       * @principle Allows public read access while restricting write operations.
       */
    match /campaigns/{campaignId}/reports/{reportId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to messages, but restricts write operations.
     * @path /messages/{messageId}
     * @allow (get) - Any user can read a message at /messages/message123.
     * @allow (list) - Any user can list messages.
     * @deny (create) - No user can create a message.
     * @deny (update) - No user can update a message.
     * @principle Allows public read access while restricting write operations.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}