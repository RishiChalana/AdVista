rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if the user is signed in and the requested userId matches their own ID (request.auth.uid).
     * @deny (get, create, update, delete, list): if the user is not signed in or the userId does not match their own.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to advertising campaign data.
     * @path /campaigns/{campaignId}
     * @allow get, list: if true (publicly readable).
     * @allow create: if the user is signed in and the userId field in the new campaign data matches their own ID.
     * @allow update, delete: if the user is signed in and the userId field in the existing campaign data matches their own ID.
     * @deny create, update, delete: if the user is not signed in or does not own the campaign.
     * @principle Enforces public read access but owner-only write access for campaigns.
     */
    match /campaigns/{campaignId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(campaignId) {
        return isSignedIn() && get(/databases/$(database)/documents/campaigns/$(campaignId)).data.userId == request.auth.uid;
      }

      function isCreatingOwner() {
        return isSignedIn() && request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner(campaignId) {
        return isSignedIn() && get(/databases/$(database)/documents/campaigns/$(campaignId)).data.userId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isCreatingOwner();
      allow update: if isExistingOwner(campaignId);
      allow delete: if isExistingOwner(campaignId);
    }

    /**
     * @description Secure access to user-specific reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (get, create, update, delete, list): if the user is signed in and the requested userId matches their own ID (request.auth.uid).
     * @deny (get, create, update, delete, list): if the user is not signed in or the userId does not match their own.
     * @principle Enforces document ownership for all operations on reports.
     */
    match /users/{userId}/reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to contact messages.
     * @path /messages/{messageId}
     * @allow get, list: if true (publicly readable).
     * @deny create, update, delete: Always deny writes to contact messages.
     * @principle Allows public read access but prohibits any modifications to contact messages.
     */
    match /messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure access to the admin dashboard data.
     * @path /admin_dashboard/data
     * @allow get: if the user is an admin (determined by the existence of a document in /roles_admin/{userId}).
     * @deny create, update, delete, list: Always deny writes and listing to the admin dashboard data.
     * @principle Restricts access to the admin dashboard to authorized admin users only.
     */
    match /admin_dashboard/data {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manage admin roles. Document existence determines admin status.
     * @path /roles_admin/{userId}
     * @allow create: Only allow create if an admin is making the request.
     * @allow get: Only allow get if an admin is making the request.
     * @allow delete: Only allow delete if an admin is making the request.
     * @deny list, update: Never allow listing or updating.
     * @principle Restricts management of admin roles to existing admins.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}