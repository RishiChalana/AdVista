/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and reports nested under user profiles.
 *   Campaigns and Messages have basic existence checks but are generally open for read/write access.
 *   The rules prioritize authorization independence and structural segregation for enhanced security.
 * @data_structure
 *   /users/{userId}: Stores user profiles. Enforces strict ownership.
 *   /campaigns/{campaignId}: Stores campaign data. Basic existence checks apply.
 *   /users/{userId}/reports/{reportId}: Stores user-specific reports. Enforces strict ownership.
 *   /campaigns/{campaignId}/reports/{reportId}: Stores campaign-specific reports. Enforces existence.
 *   /messages/{messageId}: Stores contact form messages. Basic existence checks apply.
 * @key_security_decisions
 *   - Listing of users is explicitly denied to prevent information disclosure.
 *   - Campaigns and Messages are writable by anyone, for prototyping purposes. In a production app, you would want to secure these collections properly.
 *   - Data validation is minimal during this prototyping phase and focuses only on authorization-critical fields.
 * @denormalization_for_authorization N/A
 * @structural_segregation User data, campaign data, and contact form messages are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can read, update, or delete their own profile at /users/user_abc.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a profile at /users/different_user.
     * @deny (get, update, delete) - Authenticated user with UID 'user_abc' cannot read, update, or delete the profile of another user at /users/different_user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of user ID.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to campaign data. In this prototype, anyone can read and write campaign data.
     * @path /campaigns/{campaignId}
     * @allow (get, list, create, update, delete) - Any user (authenticated or unauthenticated) can perform any operation on a campaign.
     * @principle Permits any authenticated or unauthenticated user to perform any action on a campaign.
     */
    match /campaigns/{campaignId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Enforces access control for reports nested under user profiles. Only the authenticated user can read or write their own reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a report under their profile at /users/user_abc/reports/report_xyz.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can read, update, or delete their own report at /users/user_abc/reports/report_xyz.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a report under another user's profile at /users/different_user/reports/report_xyz.
     * @deny (get, update, delete) - Authenticated user with UID 'user_abc' cannot read, update, or delete a report belonging to another user at /users/different_user/reports/report_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reports/{reportId} {
      // Helper function to check if the authenticated user is the owner of the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Enforce immutability of userId.
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Allows access to reports nested under campaign. In this prototype, anyone can read and write report data.
     * @path /campaigns/{campaignId}/reports/{reportId}
     * @allow (get, list, create, update, delete) - Any user (authenticated or unauthenticated) can perform any operation on a campaign report.
     * @principle Permits any authenticated or unauthenticated user to perform any action on a campaign report.
     */
        match /campaigns/{campaignId}/reports/{reportId} {
          allow get, list: if true;
          allow create, update, delete: if true;
        }

    /**
     * @description Allows access to contact form messages. In this prototype, anyone can read and write messages data.
     * @path /messages/{messageId}
     * @allow (get, list, create, update, delete) - Any user (authenticated or unauthenticated) can perform any operation on a message.
     * @principle Permits any authenticated or unauthenticated user to perform any action on a message.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}