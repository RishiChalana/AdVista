/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with strict ownership for user data and open reads for public collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can read/write their own profile.
 * - /campaigns/{campaignId}: Stores advertising campaigns. All users can read campaigns, but only admins can create, update, and delete campaigns.
 * - /users/{userId}/reports/{reportId}: Stores reports generated by each user. Only the user can read/write their own reports.
 * - /messages/{messageId}: Stores contact messages. Only admins can read/write messages.
 * - /admin_dashboard/data: Singleton document storing admin dashboard data. Only admins can read/write.
 * - /roles_admin/{userId}: Used to mark specific users as admins. Document existence determines admin status.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - The campaigns collection is publicly readable, but write access is restricted to admins.
 * - All write operations are strictly controlled via authentication and role checks.
 * - No data validation is performed beyond authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner (same user ID).
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Defines roles for users, such as admin or regular user.
     * @path /roles_admin/{userId}
     * @allow (create) User 'adminId' can create their own admin role document.
     * @deny (create) User 'notAdminId' cannot create an admin role document for 'adminId'.
     * @principle Enforces role-based access control, specifically for admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages user profiles, allowing users to read and update their own data.
     * @path /users/{userId}
     * @allow (get) User 'userId' can read their own profile.
     * @allow (create) User 'userId' can create their own profile.
     * @deny (get) User 'otherUserId' cannot read User 'userId' profile.
     * @deny (update) User 'otherUserId' cannot update User 'userId' profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages advertising campaigns, allowing anyone to read, but only admins to create, update, and delete.
     * @path /campaigns/{campaignId}
     * @allow (get) Any user can read any campaign.
     * @allow (create) Admins can create campaigns.
     * @deny (create) Regular users cannot create campaigns.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /campaigns/{campaignId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages reports generated by each user, ensuring only the owner can access them.
     * @path /users/{userId}/reports/{reportId}
     * @allow (get) User 'userId' can read their own reports.
     * @allow (create) User 'userId' can create their own reports.
     * @deny (get) User 'otherUserId' cannot read User 'userId' reports.
     * @deny (update) User 'otherUserId' cannot update User 'userId' reports.
     * @principle Enforces document ownership for nested data.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages contact messages, allowing only admins to read and manage them.
     * @path /messages/{messageId}
     * @allow (get) Admins can read messages.
     * @allow (create) Any signed in user can create messages.
     * @deny (get) Regular users cannot read messages.
     * @deny (update) Regular users cannot update messages.
     * @principle Restricts access to contact messages to admins.
     */
    match /messages/{messageId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages the admin dashboard data, restricting access to admins only.
     * @path /admin_dashboard/data
     * @allow (get) Admins can read the admin dashboard data.
     * @deny (get) Regular users cannot read the admin dashboard data.
     * @principle Restricts access to admin dashboard data to admins.
     */
    match /admin_dashboard/data {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}