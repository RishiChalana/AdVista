{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Advista platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The user's role (e.g., Admin, Analyst, Viewer)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "role",
        "createdAt"
      ]
    },
    "Campaign": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Campaign",
      "type": "object",
      "description": "Represents an ad campaign within the Advista platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the campaign entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the campaign."
        },
        "platform": {
          "type": "string",
          "description": "The platform on which the campaign is running (e.g., Google Ads, Meta)."
        },
        "budget": {
          "type": "number",
          "description": "The budget allocated for the campaign."
        },
        "impressions": {
          "type": "number",
          "description": "The number of impressions generated by the campaign."
        },
        "clicks": {
          "type": "number",
          "description": "The number of clicks generated by the campaign."
        },
        "conversions": {
          "type": "number",
          "description": "The number of conversions resulting from the campaign."
        },
        "revenue": {
          "type": "number",
          "description": "The revenue generated by the campaign."
        },
        "status": {
          "type": "string",
          "description": "The status of the campaign (e.g., Active, Paused)."
        }
      },
      "required": [
        "id",
        "name",
        "platform",
        "budget",
        "impressions",
        "clicks",
        "conversions",
        "revenue",
        "status"
      ]
    },
    "Report": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Report",
      "type": "object",
      "description": "Represents a generated report within the Advista platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the report entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Report)"
        },
        "campaignId": {
          "type": "string",
          "description": "Reference to Campaign. (Relationship: Campaign 1:N Report)"
        },
        "dateGenerated": {
          "type": "string",
          "description": "Timestamp indicating when the report was generated.",
          "format": "date-time"
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the generated report file.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "userId",
        "campaignId",
        "dateGenerated",
        "fileUrl"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message sent through the contact form.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the message sender."
        },
        "email": {
          "type": "string",
          "description": "The email address of the message sender.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The content of the message."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/campaigns/{campaignId}",
        "definition": {
          "entityName": "Campaign",
          "schema": {
            "$ref": "#/backend/entities/Campaign"
          },
          "description": "Stores campaign data.  No specific authorization beyond existence.",
          "params": [
            {
              "name": "campaignId",
              "description": "The unique identifier for the campaign."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores reports associated with a user. Enforces path-based ownership. The report also has a campaignId to identify the campaign.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      },
      {
        "path": "/campaigns/{campaignId}/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores reports associated with a campaign. Enforces existence. The report also has a userId to identify the user.",
          "params": [
            {
              "name": "campaignId",
              "description": "The unique identifier for the campaign."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      },
      {
        "path": "/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages sent through the contact form.  No specific authorization beyond existence.",
          "params": [
            {
              "name": "messageId",
              "description": "The unique identifier for the message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, DBAC, and support secure list operations (QAPs). It prioritizes path-based ownership for private user data and uses a membership map approach for collaborative data (if applicable). Denormalization is applied to avoid `get()` calls in security rules.\n\n**Authorization Independence:** User roles are managed at `/users/{userId}`. Reports are stored as subcollections of both User and Campaign to ensure Authorization Independence.  This denormalization allows security rules to validate access without needing to read other documents, facilitating atomic operations.\n\n**Structural Segregation:**  User data and Campaign data are kept separate to ensure that different security requirements don't conflict. The `messages` collection is separated to treat it differently, in case of different access control in the future.\n\n**QAPs (Rules are not Filters):** The path-based ownership ensures that listing operations are secure, as rules can easily filter based on the `request.auth.uid` matching the `userId` in the path, enabling secure listing of user-owned data without filtering on the client side."
  }
}