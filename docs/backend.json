{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Advista platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "organizationName": {
            "type": "string",
            "description": "The name of the organization the user belongs to."
        },
        "role": {
          "type": "string",
          "description": "User's role (Admin, Analyst, Viewer)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the user was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "role",
        "createdAt"
      ]
    },
    "Campaign": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Campaign",
      "type": "object",
      "description": "Represents an advertising campaign.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the campaign entity."
        },
        "userId": {
            "type": "string",
            "description": "The ID of the user who owns this campaign."
        },
        "name": {
          "type": "string",
          "description": "Campaign name."
        },
        "platform": {
          "type": "string",
          "description": "Advertising platform (Google Ads, Meta, etc.)."
        },
        "budget": {
          "type": "number",
          "description": "Campaign budget."
        },
        "impressions": {
          "type": "number",
          "description": "Number of impressions."
        },
        "clicks": {
          "type": "number",
          "description": "Number of clicks."
        },
        "conversions": {
          "type": "number",
          "description": "Number of conversions."
        },
        "revenue": {
          "type": "number",
          "description": "Campaign revenue."
        },
        "status": {
          "type": "string",
          "description": "Campaign status (Active, Paused)."
        },
        "createdAt": {
            "type": "string",
            "description": "Timestamp of when the campaign was created.",
            "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "platform",
        "budget",
        "impressions",
        "clicks",
        "conversions",
        "revenue",
        "status",
        "createdAt"
      ]
    },
    "Report": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Report",
      "type": "object",
      "description": "Represents a generated report.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the report entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Report)"
        },
        "campaignId": {
          "type": "string",
          "description": "Reference to Campaign. (Relationship: Campaign 1:N Report)"
        },
        "dateGenerated": {
          "type": "string",
          "description": "Date and time the report was generated.",
          "format": "date-time"
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the generated report file.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "userId",
        "campaignId",
        "dateGenerated",
        "fileUrl"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a contact message.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message entity."
        },
        "name": {
          "type": "string",
          "description": "Sender's name."
        },
        "email": {
          "type": "string",
          "description": "Sender's email address.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "Message content."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the message was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "createdAt"
      ]
    },
    "AdminDashboard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminDashboard",
      "type": "object",
      "description": "Represents the admin dashboard, containing system health and configuration data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin dashboard entity."
        },
        "databaseHealth": {
          "type": "string",
          "description": "Status of the database (e.g., 'Online', 'Offline', 'Degraded')."
        },
        "serverHealth": {
          "type": "string",
          "description": "Status of the backend servers (e.g., 'Online', 'Overloaded')."
        },
        "totalUsers": {
          "type": "number",
          "description": "Total number of registered users."
        },
        "activeCampaigns": {
          "type": "number",
          "description": "Number of currently active campaigns."
        },
        "systemLogs": {
          "type": "array",
          "description": "Array of system log entries.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "databaseHealth",
        "serverHealth",
        "totalUsers",
        "activeCampaigns",
        "systemLogs"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Includes 'userId' as a parameter.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/campaigns/{campaignId}",
        "definition": {
          "entityName": "Campaign",
          "schema": {
            "$ref": "#/backend/entities/Campaign"
          },
          "description": "Stores all advertising campaigns. Includes `campaignId` as a parameter.",
          "params": [
            {
              "name": "campaignId",
              "description": "The unique identifier for the campaign."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores reports generated by each user. Includes 'userId' and 'reportId' as parameters.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      },
      {
        "path": "/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores contact messages received from users. Includes 'messageId' as a parameter.",
          "params": [
            {
              "name": "messageId",
              "description": "The unique identifier for the message."
            }
          ]
        }
      },
      {
        "path": "/admin_dashboard/data",
        "definition": {
          "entityName": "AdminDashboard",
          "schema": {
            "$ref": "#/backend/entities/AdminDashboard"
          },
          "description": "Singleton document storing admin dashboard information."
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "admin",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection used to mark specific users as admins. Document existence determines admin status. Includes 'userId' as a parameter.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability, adhering to the specified principles. User data is stored in `/users/{userId}`. Campaigns are stored in a top-level `/campaigns` collection and are linked to a user via a `userId` field. Reports are nested under each user at `/users/{userId}/reports/{reportId}` to establish clear ownership. Messages (contact form submissions) are stored in a top-level `/messages` collection. Admin dashboard data, which includes system health and user count, is stored in a singleton document at `/admin_dashboard/data`.\n\n**Authorization Independence:**  Ownership is enforced through path-based rules for user-owned data (reports under users) and through the `userId` field for campaigns. No `get()` calls are needed to validate ownership.\n\n**Structural Segregation:**  Data with different access requirements are segregated. User data and reports are kept separate from global entities like campaigns and contact messages. The admin dashboard is a singleton document for centralized admin data. \n\n**QAPs (Rules are not Filters):** The structure facilitates secure `list` operations. Listing reports is scoped to the user, preventing unauthorized access. The Campaigns collection can be queried securely by `userId`.\n\n**Admin Role:** The existence of an admin user is checked via `/roles_admin/{uid}` collection, where documents exist only for admin users."
  }
}
